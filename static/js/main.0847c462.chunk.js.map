{"version":3,"sources":["hooks/useFetch.js","components/getters/GetGenres.js","components/Header/Genres.js","components/Header/HeaderNav.js","components/Header/Header.js","components/Footer/Footer.js","elements/Button.js","components/search/SearchLine.js","hooks/useInput.js","pages/searchResults/SingleResult.js","pages/home/JustReleasedContent.js","pages/home/home.js","elements/ShowPrevNext.js","pages/searchResults/MovieSearchResults.js","components/search/MovieSearch.js","components/people/Cast.js","components/people/Crew.js","components/people/GetPeople.js","pages/details/MovieDetails.js","pages/details/GetMovieDetails.js","pages/detailedSearch/DetailedSearchResults.js","pages/detailedSearch/GetActorData.js","pages/detailedSearch/DetailedSearchForm.js","pages/popular/PopularAllTimes.js","pages/popular/PopularByGenres.js","pages/actor/Actor.js","pages/actor/GetActor.js","App.js","index.js"],"names":["useFetch","url","query","useState","response","setResponse","isError","setIsError","isLoading","setIsLoading","useEffect","a","fetch","res","json","fetchData","GetGenres","genres","Genres","Fragment","map","genre","key","id","onClick","window","location","reload","to","name","HeaderNav","className","Header","props","Footer","document","body","scrollTop","documentElement","Button","text","SearchLine","initialValue","value","setValue","reset","bind","onChange","event","target","useInput","history","useHistory","onSubmit","preventDefault","push","type","placeholder","SingleResult","movie","title","vote_average","vote_count","poster_path","release_date","src","alt","JustReleasedContent","data","setData","allPages","setAllPages","totalRes","setTotalRes","page","setPage","prevData","results","total_pages","total_results","style","textAlign","current","nowShowing","e","prevPage","loadMore","Home","today","Date","toISOString","split","movies_url","today2","final","setDate","getDate","weekAgo","upcomming_url","showAll","previousSibling","classList","remove","display","ShowPrevNext","showPrev","showNext","MovieSearchResults","console","log","length","fontWeight","fontSize","MovieSearch","useParams","scrollUp","Cast","Swiper","slidesPerView","spaceBetween","navigation","nextEl","prevEl","breakpoints","1024","768","640","320","cast","actor","cast_id","profile_path","character","class","Crew","director","setDirector","writers","setWriters","sound","setSound","crew","forEach","obj","department","prev","item","job","countries","country","iso_3166_1","GetPeople","people","movieId","MovieDetails","details","backdrop_path","overview","budget","revenue","runtime","homepage","production_companies","original_language","logo_path","tagline","production_countries","genresList","formatCurrency","Intl","NumberFormat","currency","substring","href","format","company","GetMovieDetails","status_code","DetailedSearchResults","GetActorData","isSubmitted","values","year","DetailedSearchForm","fullUrl","setIsSubmitted","initialValues","selectedGenre","sortBy","setSubmitting","resetForm","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","onBlur","checked","includes","disabled","PopularAllTimes","PopularByGenres","genreId","genreName","Actor","actorData","knownForArr","known_for","getKnownFor","getID","fullActorData","biography","birthday","deathday","place_of_birth","media_type","undefined","GetActor","actorName","App","exact","path","ReactDOM","render","basename","process","getElementById"],"mappings":"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","file":"static/js/main.0847c462.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n\r\nexport const useFetch = (url, query) => {\r\n  const [response, setResponse] = useState(null);\r\n  const [isError, setIsError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsError(false);\r\n      setIsLoading(true);\r\n      try {\r\n        const res = await fetch(url);\r\n        const json = await res.json();\r\n        setResponse(json);\r\n      } catch (error) {\r\n        setIsError(true);\r\n      }\r\n      setIsLoading(false)\r\n    };\r\n\r\n    if (query) {\r\n      fetchData();\r\n    }\r\n  }, [url, query])\r\n\r\n  return { response, isLoading, isError };\r\n\r\n};\r\n\r\n","import { useFetch } from '../../hooks/useFetch'\r\n\r\nexport const GetGenres = () => {\r\n  const data = useFetch('https://api.themoviedb.org/3/genre/movie/list?api_key=f1782698a1c04f301973e311a7876bdb&language=en-US', 'genres')\r\n\r\n  const genres = data.response\r\n\r\n\r\n\r\n  return genres !== null ? genres : ''\r\n}\r\n\r\n","import React from 'react'\r\nimport { GetGenres } from '../getters/GetGenres'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst Genres = () => {\r\n\r\n  const genres = GetGenres()\r\n  return (\r\n    <React.Fragment>\r\n      {genres !== '' ? genres.genres.map(genre =>\r\n        <li key={genre.id} onClick={() => window.location.reload(false)}>\r\n          <Link to={`/popular_by_genre/${genre.id}/${genre.name}`}>\r\n            {genre.name}\r\n          </Link>\r\n\r\n\r\n        </li>) : null}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Genres","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Genres from './Genres'\r\n\r\nconst HeaderNav = () => {\r\n  return (\r\n    <>\r\n\r\n      <ul className=\"navbar\">\r\n        <li className=\"dropdown\">Popular by Genres\r\n          <ul className=\"dropdown-content genres-list\">\r\n            <Genres />\r\n          </ul>\r\n        </li>\r\n\r\n        {/* <li>Companies</li> */}\r\n\r\n\r\n        {/* <Link to=\"actors\"><li>Actors</li></Link> */}\r\n        {/* https://api.themoviedb.org/3/search/person?query=brad+pitt&api_key=f1782698a1c04f301973e311a7876bdb&language=en-US&page=1 */}\r\n\r\n        <li className=\"dropdown\">The Most popular movies\r\n          <ul className=\"dropdown-content popular\">\r\n            <Link to=\"popular_all_times\"><li>of all time</li></Link>\r\n            <Link to=\"popular_by_year\"><li>of selected year</li></Link>\r\n\r\n            {/* <li>by genres</li> */}\r\n\r\n\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default HeaderNav","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './header.css'\r\nimport HeaderNav from './HeaderNav'\r\n\r\nconst Header = (props) => {\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <Link to=\"/\">\r\n          <h1>Movies library</h1>\r\n\r\n        </Link>\r\n      </header>\r\n      <HeaderNav />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default Header","import React from 'react'\r\nimport './footer.css'\r\n\r\nconst Footer = () => {\r\n\r\n  const scrollUp = () => {\r\n    document.body.scrollTop = 0;\r\n    document.documentElement.scrollTop = 0;\r\n  }\r\n  return (\r\n    <footer>\r\n      <span className=\"copy\">© 2020 KriStep All Rights Reserved</span>\r\n      <i\r\n        className=\"fas fa-arrow-up go-up\"\r\n        onClick={scrollUp}\r\n      ></i>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport './elements.css'\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button onClick={props.onClick} className={props.className}>{props.text}</button>\r\n  )\r\n}\r\n\r\nexport default Button","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './searchLine.css'\r\nimport { useInput } from '../../hooks/useInput'\r\nimport Button from '../../elements/Button'\r\n\r\nconst SearchLine = (props) => {\r\n  const { value, bind, reset } = useInput('');\r\n  let history = useHistory();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    reset();\r\n    if (value) {\r\n      history.push(`/search_results/${value}`)\r\n    }\r\n  }\r\n  const handleClick = () => {\r\n    history.push(`/detailed_search`)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"search-line\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"search by movie title\"\r\n          {...bind} />\r\n        <button type=\"submit\">Search</button>\r\n        {/* <Button\r\n          onClick={handleClick}\r\n          text={'go to detailed search'}\r\n          className={'btn detailed_search'}\r\n        /> */}\r\n      </form>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchLine","import { useState } from \"react\";\r\n\r\nexport const useInput = initialValue => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(\"\"),\r\n    bind: {\r\n      value,\r\n      onChange: event => {\r\n        setValue(event.target.value);\r\n      }\r\n    }\r\n  };\r\n};","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst SingleResult = (props) => {\r\n  const { title, id, vote_average, vote_count, poster_path, release_date } = props.movie\r\n  return (\r\n    <>\r\n      <Link to={`/${id}`} className=\"result-item\">\r\n        {poster_path ? <img src={`https://image.tmdb.org/t/p/w300/${poster_path}`} alt=\"movie poster\" /> : <img alt=\"this movie has no poster\" />}\r\n\r\n\r\n        <div className=\"result-item_descrip\">\r\n          <h3>{title}</h3>\r\n          {vote_average > 0 ?\r\n            <p>{vote_average} points ({vote_count} votes)</p>\r\n            :\r\n            <p>-- no votes yet --</p>\r\n          }\r\n\r\n          <span>{release_date}</span>\r\n        </div>\r\n\r\n      </Link>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleResult","import React, { useState, useEffect } from 'react'\r\nimport Button from '../../elements/Button'\r\nimport SingleResult from '../searchResults/SingleResult'\r\n\r\n\r\nconst JustReleasedContent = (props) => {\r\n  const [data, setData] = useState([])\r\n  const [allPages, setAllPages] = useState(0)\r\n  const [totalRes, setTotalRes] = useState(0)\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false)\r\n  const [page, setPage] = useState(1)\r\n\r\n  const loadMore = (e) => {\r\n    if (page < allPages) {\r\n      e.preventDefault();\r\n      setPage(prevPage => prevPage + 1)\r\n    }\r\n  }\r\n\r\n  const nowShowing = () => {\r\n    let current = page * 20\r\n    if (current > totalRes) {\r\n      current = totalRes\r\n    }\r\n    return current\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsError(false)\r\n      setIsLoading(true)\r\n      try {\r\n\r\n        const response = await fetch(`${props.url}${page}`)\r\n        const res = await response.json()\r\n\r\n\r\n        setData(prevData => [...prevData, ...res.results])\r\n        setAllPages(res.total_pages)\r\n        setTotalRes(res.total_results)\r\n      } catch (error) {\r\n        setIsError(true)\r\n      }\r\n      setIsLoading(false)\r\n    }\r\n    fetchData()\r\n  }, [page, props.url])\r\n\r\n\r\n  return (\r\n    <>\r\n      {isError && <div>Something went wrong ...</div>}\r\n      {isLoading ? <h1>LOADING...</h1> :\r\n        <>\r\n          <h2 className=\"new-movies_header\">{props.text}</h2>\r\n          <div className=\"new-movies_items\">\r\n            {data.map(movie =>\r\n              <SingleResult movie={movie} key={movie.id} />\r\n            )}\r\n          </div>\r\n          <h4 style={{ textAlign: 'center' }}>now showing:  {nowShowing()}  from {totalRes} results</h4>\r\n\r\n          {page < allPages ? <Button\r\n            onClick={(e) => loadMore(e)}\r\n            className={'btn load_more'}\r\n            text={'Load More'}\r\n          /> : ''}\r\n\r\n\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default JustReleasedContent","import React from 'react'\r\nimport '../searchResults/results.css'\r\nimport './home.css'\r\nimport JustReleasedContent from './JustReleasedContent'\r\nimport Button from '../../elements/Button'\r\n\r\nconst Home = () => {\r\n\r\n  const today = new Date().toISOString().split('T')[0];\r\n  const weekAgo = () => {\r\n    const today2 = new Date()\r\n    const final = new Date(today2)\r\n    final.setDate(today2.getDate() - 7);\r\n    const weekAgoDate = final.toISOString().split('T')[0]\r\n    return weekAgoDate\r\n  };\r\n\r\n  let movies_url = `https://api.themoviedb.org/3/discover/movie?api_key=f1782698a1c04f301973e311a7876bdb&primary_release_date.gte=${weekAgo()}&primary_release_date.lte=${today}&sort_by=release_date.desc&page=`;\r\n\r\n  let upcomming_url = `https://api.themoviedb.org/3/movie/upcoming?api_key=f1782698a1c04f301973e311a7876bdb&primary_release_date.gte=${today}&page=`;\r\n\r\n  const showAll = (event) => {\r\n    event.target.previousSibling.classList.remove('new-movies_home')\r\n    event.target.style.display = 'none'\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"new-movies_container \">\r\n        <div className=\"new-movies-content new-movies_home\">\r\n          <JustReleasedContent\r\n            url={movies_url}\r\n            text={'Just released movies:'}\r\n          />\r\n        </div>\r\n        <Button\r\n          onClick={event => showAll(event)}\r\n          text={'show all'}\r\n          className={'btn show_all'}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"new-movies_container upcomming-container\">\r\n\r\n        <div className=\"new-movies_content new-movies_home\">\r\n          <JustReleasedContent\r\n            url={upcomming_url}\r\n            text={'Upcomming movies:'}\r\n          />\r\n        </div>\r\n        <Button\r\n          onClick={event => showAll(event)}\r\n          text={'show all'}\r\n          className={'btn show_all'}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst ShowPrevNext = (props) => {\r\n\r\n  return (\r\n    <div className=\"prev-next_container\">\r\n      <button className=\"btn\" onClick={props.showPrev}>Prev</button>\r\n      <span> {props.page} of {props.total_pages} </span>\r\n      <button className=\"btn\" onClick={props.showNext}>Next</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowPrevNext","import React from 'react'\r\nimport SingleResult from './SingleResult'\r\nimport ShowPrevNext from '../../elements/ShowPrevNext'\r\n\r\nconst MovieSearchResults = (props) => {\r\n\r\n  const { page, total_results, total_pages, results } = props.results\r\n  const query = props.query\r\n  console.log(results)\r\n  return (\r\n    <div className=\"results-container\">\r\n\r\n      <h2\r\n        style={{ textAlign: 'center' }}>\r\n        Search by: '{query}' <br />\r\n        {results.length > 0 ?\r\n          <span\r\n            style={{ fontWeight: 'normal', fontSize: 'smaller' }}>{total_results} movies found</span> : ''}\r\n      </h2>\r\n\r\n      <div className=\"results-list\">\r\n        {\r\n          results.length > 0 ?\r\n            results.map(movie => (\r\n              <SingleResult movie={movie} key={movie.id} />\r\n            ))\r\n            : <p>nothing to display</p>\r\n        }\r\n      </div>\r\n\r\n      {\r\n        total_pages > 0 ?\r\n          <ShowPrevNext\r\n            showNext={page < total_pages ? props.showNext : null}\r\n            showPrev={props.showPrev}\r\n            page={page}\r\n            total_pages={total_pages}\r\n          /> : ''\r\n      }\r\n\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default MovieSearchResults\r\n\r\n","import React, { useState } from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport MovieSearchResults from '../../pages/searchResults/MovieSearchResults'\r\n\r\nconst MovieSearch = () => {\r\n  const { query } = useParams()\r\n  const [page, setPage] = useState(1);\r\n\r\n  let url = `https://api.themoviedb.org/3/search/movie?api_key=f1782698a1c04f301973e311a7876bdb&query=${query}&page=${page}`\r\n\r\n  const { response } = useFetch(url, query)\r\n  const scrollUp = () => {\r\n    document.body.scrollTop = 0;\r\n    document.documentElement.scrollTop = 0;\r\n  }\r\n\r\n  const showPrev = () => {\r\n    if (page > 1) setPage(prevPage => prevPage - 1);\r\n    scrollUp()\r\n  }\r\n\r\n  const showNext = () => {\r\n    setPage(prevPage => prevPage + 1);\r\n    scrollUp()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {response !== null ?\r\n        <MovieSearchResults\r\n          results={response}\r\n          query={query}\r\n          showNext={showNext}\r\n          showPrev={showPrev}\r\n        /> : 'not found'}\r\n    </>\r\n  )\r\n}\r\nexport default MovieSearch\r\n","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Swiper from 'swiper'\r\n\r\nconst Cast = (props) => {\r\n\r\n  useEffect(() => {\r\n    new Swiper(\".swiper-container\", {\r\n      slidesPerView: 10,\r\n      spaceBetween: 50,\r\n      navigation: {\r\n        nextEl: \".swiper-button-next\",\r\n        prevEl: \".swiper-button-prev\"\r\n      },\r\n      breakpoints: {\r\n        1024: {\r\n          slidesPerView: 6,\r\n          spaceBetween: 40\r\n        },\r\n        768: {\r\n          slidesPerView: 4,\r\n          spaceBetween: 30\r\n        },\r\n        640: {\r\n          slidesPerView: 3,\r\n          spaceBetween: 20\r\n        },\r\n        320: {\r\n          slidesPerView: 2,\r\n          spaceBetween: 10\r\n        }\r\n      }\r\n    });\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"cast-container swiper-container\">\r\n        <ul className=\"cast swiper-wrapper \">\r\n          {props.cast.map(actor => (\r\n            <Link\r\n              className=\"swiper-slide\"\r\n              to={`/actor/${actor.name}`}\r\n              key={actor.cast_id}\r\n            >\r\n              <li>\r\n                <div className=\"actor-img-container\">\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/original${actor.profile_path}`}\r\n                    alt=\"actor\"\r\n                  />\r\n                </div>\r\n                {actor.character ? <span className=\"character\">{actor.character}</span> : ''}\r\n                <span>{actor.name}</span>\r\n              </li>\r\n            </Link>\r\n          )\r\n          )}\r\n\r\n        </ul>\r\n        <div class=\"swiper-button-prev\"></div>\r\n        <div class=\"swiper-button-next\"></div>\r\n\r\n      </div>\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Cast","import React, { useState, useEffect } from 'react'\r\n\r\nconst Crew = (props) => {\r\n\r\n  const [director, setDirector] = useState('')\r\n  const [writers, setWriters] = useState([])\r\n  const [sound, setSound] = useState([])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    props.crew.forEach(obj => {\r\n      if (obj.department === 'Directing') {\r\n        setDirector(obj.name)\r\n      } else if (obj.department === 'Writing') {\r\n        setWriters(prev => [...prev, obj])\r\n      } else if (obj.department === 'Sound') {\r\n        setSound(prev => [...prev, obj])\r\n\r\n      }\r\n    })\r\n  }, [])\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"crew-container\">\r\n      <ul className=\"crew\">\r\n        <li>\r\n          <h4>Directed by:</h4> {director}\r\n        </li>\r\n\r\n        {writers !== [] ?\r\n          <li>\r\n            <h4>Written by: </h4>\r\n            <ul> {writers.map(item => (<li key={item.id}>{item.name} - {item.job}</li>))}</ul>\r\n          </li> : ''\r\n        }\r\n\r\n        {sound !== [] ?\r\n          <li>\r\n            <h4>Sound:</h4>\r\n            <ul> {sound.map(item => (<li key={item.id}>{item.name} - {item.job}</li>))}</ul>\r\n          </li> : ''\r\n        }\r\n\r\n\r\n        <li>\r\n          <h4>Production countries: </h4>\r\n          <ul> {props.countries.map(country => <li key={country.iso_3166_1}>{country.iso_3166_1} -  {country.name}</li>)}</ul>\r\n        </li>\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </ul>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Crew","import React from 'react'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport Cast from './Cast'\r\nimport Crew from './Crew'\r\nimport 'swiper/css/swiper.css'\r\nimport './people.css'\r\n\r\n\r\nexport const GetPeople = (props) => {\r\n\r\n  const data = useFetch(`https://api.themoviedb.org/3/movie/${props.movieId}/credits?api_key=f1782698a1c04f301973e311a7876bdb`, 'people')\r\n\r\n  const people = data.response\r\n\r\n  if (people !== null) {\r\n    // console.log(people.cast)\r\n    console.log(people.crew)\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {people !== null ?\r\n        <>\r\n          <Cast cast={people.cast} />\r\n          <Crew crew={people.crew} countries={props.countries} />\r\n        </>\r\n        : ''\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport { GetPeople } from '../../components/people/GetPeople'\r\nimport Crew from '../../components/people/Crew'\r\nimport './details.css'\r\n\r\nconst MovieDetails = (props) => {\r\n\r\n  console.log(props)\r\n  const { title, backdrop_path, overview, genres, budget, revenue, release_date, runtime, homepage, production_companies, logo_path, original_language, tagline, id, production_countries } = props.details\r\n\r\n  const genresList = genres ? genres.map(genre => <li key={genre.id}>{genre.name}</li>) : '';\r\n\r\n  const formatCurrency = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n\r\n  return (\r\n    <div className=\"details-wrapper\">\r\n      <div className=\"details-title\">\r\n        <h2>{title}</h2>\r\n        <span>{release_date.substring(0, 4)}</span>\r\n      </div>\r\n\r\n\r\n      <div className=\"details-pic-container\">\r\n        <div className=\"details-info\">\r\n          <ul className=\"details_genres\">{genresList}</ul>\r\n          <span>release date: {release_date}</span>\r\n          <span> {runtime > 0 ? runtime + 'min' : ''} </span>\r\n          <span>{original_language}</span>\r\n        </div>\r\n\r\n        {backdrop_path ? <img className=\"details_img\" src={`https://image.tmdb.org/t/p/w500${backdrop_path}`} alt=\"backdrop\" /> : ''}\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <div className=\"details-description-container\">\r\n        <p><em>{tagline}</em></p>\r\n        <p>{overview}</p>\r\n        {homepage ?\r\n          <a className=\"homepage-link\" href={`${homepage}`} alt=\"homepage\">Visit movie homepage</a> : ''}\r\n\r\n        {budget > 0 ?\r\n          <ul className=\"budget\">\r\n            <li>{formatCurrency.format(budget)} - budget</li>\r\n            <li>{formatCurrency.format(revenue)} - revenue</li>\r\n          </ul> : ''}\r\n      </div>\r\n\r\n\r\n      <GetPeople movieId={id} countries={production_countries} />\r\n\r\n\r\n\r\n\r\n      <ul className=\"companies\">\r\n        <li style={{ fontWeight: 'bold' }}> Production companies:</li>\r\n        {production_companies ? production_companies.map(company =>\r\n          <li key={company.id}>\r\n            {company.logo_path ?\r\n              <img\r\n                className=\"company_logo\"\r\n                src={`https://image.tmdb.org/t/p/w200${company.logo_path}`}\r\n                alt=\"company logo\" />\r\n              :\r\n              <div className=\"instead-company-logo\">\r\n                <p>{company.name}</p>\r\n              </div>}\r\n          </li>\r\n        ) : <li>no information</li>}\r\n      </ul>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default MovieDetails","import React from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport MovieDetails from './MovieDetails'\r\n\r\nconst GetMovieDetails = () => {\r\n  const { movieId } = useParams()\r\n\r\n  const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=f1782698a1c04f301973e311a7876bdb`\r\n\r\n  const response = useFetch(url, movieId)\r\n  console.log(response)\r\n  return (\r\n    <>\r\n      {response.response !== null && response.response.status_code !== 34 ?\r\n        <MovieDetails\r\n          details={response.response}\r\n          movieId={movieId}\r\n        />\r\n        : 'sorry, this movie has no details in our database'\r\n      }\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default GetMovieDetails","import React from 'react'\r\nimport JustReleasedContent from '../home/JustReleasedContent'\r\n\r\nconst DetailedSearchResults = (props) => {\r\n  console.log(props.url)\r\n\r\n  return (\r\n    <div>\r\n      {props.url ? <JustReleasedContent url={props.url} text={'blablablabla'} /> : ''}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DetailedSearchResults\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport { GetActorId } from '../../components/getters/GetActorId'\r\nimport Test from './Test'\r\n\r\n\r\nexport const GetActorData = (props) => {\r\n\r\n\r\n  // const url = `https://api.themoviedb.org/3/search/person?query=${name}&api_key=f1782698a1c04f301973e311a7876bdb&language=en-US`\r\n\r\n  // const actorData = useFetch(url, 'asasas')\r\n\r\n  // console.log(url)\r\n\r\n  // const getActorID = () => {\r\n  //   if (actorData.response !== null && name !== '' && actorData.response.results !== undefined) {\r\n  //     return `&with_cast=${actorData.response.results[0].id}`\r\n  //   } else {\r\n  //     return ''\r\n  //   }\r\n  // }\r\n\r\n  // const id = getActorID()\r\n  // console.log(id)\r\n\r\n\r\n  // return id\r\n\r\n\r\n  // const id = GetActorId(name)\r\n  if (props.isSubmitted === true) {\r\n    console.log(props.values)\r\n  }\r\n\r\n  //console.log(props.isSubmitted)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>helloooooooooo</h2>\r\n      <p>{props.values.year}</p>\r\n    </div>\r\n\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Formik } from 'formik'\r\nimport { GetGenres } from '../../components/getters/GetGenres'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport DetailedSearchResults from './DetailedSearchResults'\r\nimport Test from './Test'\r\n\r\nimport { GetActorData } from './GetActorData'\r\n\r\n\r\n\r\n// sort by date --- neveikia --- tikriausiai del API\r\n\r\n// actor neperduoda id i url + pakeisti kad perduotu ne visus variantus is array map, nes ju gali buti labai daug (gal i input idet suggestion??? dabar padariau kad naudotu [0] varianta.)   \r\n//ten kur naudojamas useFetch su actorName, actorName yra nepasiekiamas. gal kazkaip viska daryti kitame componente,  i kuri perduoti visus values is Formik??????????\r\n\r\n\r\n\r\n\r\nconst DetailedSearchForm = () => {\r\n  const genres = GetGenres()\r\n  // const [url, setUrl] = useState('')\r\n  const [fullUrl, setFullUrl] = useState('')\r\n  const [isSubmitted, setIsSubmitted] = useState(false)\r\n\r\n\r\n\r\n  // const getGenre = (selected) => {\r\n  //   if (selected !== '') {\r\n  //     return `&with_genres=${selected}`\r\n  //   } else {\r\n  //     return ''\r\n  //   }\r\n  // }\r\n\r\n  // const getYear = (year) => {\r\n  //   if (year !== '') {\r\n  //     return `&primary_release_year=${year}`\r\n  //   } else {\r\n  //     return ''\r\n  //   }\r\n  // }\r\n\r\n  // const id = GetActorData(actorName)\r\n  // console.log(id)\r\n\r\n  // const handleValues = (values) => {\r\n\r\n  //   setActorName(values.actor)\r\n\r\n  //   setFullUrl(`https://api.themoviedb.org/3/discover/movie?api_key=f1782698a1c04f301973e311a7876bdb${getGenre(values.selectedGenre)}${getYear(values.year)}&sort_by=${values.sortBy}&page=`)\r\n\r\n\r\n\r\n\r\n  // }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      {genres !== '' ?\r\n\r\n        <Formik\r\n          initialValues={{\r\n            year: '',\r\n            actor: '',\r\n            selectedGenre: '',\r\n            sortBy: 'vote_average.desc'\r\n          }}\r\n\r\n          onSubmit={(values, { setSubmitting, resetForm }) => {\r\n            setIsSubmitted(true)\r\n            setSubmitting(true);\r\n\r\n            setSubmitting(false)\r\n            // resetForm();\r\n          }}\r\n        >\r\n          {({\r\n\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n            setFieldValue\r\n\r\n          }) => (\r\n              <div>\r\n\r\n\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                  <div className=\"input-row\">\r\n                    <label>Sort by:</label>\r\n                    <select\r\n                      value={values.sortBy}\r\n                      onChange={handleChange}\r\n                      name=\"sortBy\"\r\n                      className=\"sort-by\">\r\n                      <option value=\"vote_average.desc\">popularity</option>\r\n                      <option value=\"release_year.asc\">release date - ascending</option>\r\n                      <option value=\"release_year.desc\">release date - decreasing</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"input-row\">\r\n                    <label>Year of release</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"year\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.year}\r\n                      className={touched.year && errors.year ? \"has-error\" : null}\r\n                    />\r\n                    {/* <Error touched={touched.year} message={errors.year} /> */}\r\n                  </div>\r\n\r\n                  <div className=\"input-row\">\r\n                    <label>Actor</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"actor\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.actor}\r\n                      className={touched.actor && errors.actor ? \"has-error\" : null}\r\n                    />\r\n                    {/* <Error touched={touched.actor} message={errors.actor} /> */}\r\n                  </div>\r\n\r\n\r\n                  <div className=\"input-row\">\r\n                    {genres !== '' ? genres.genres.map(genre => (\r\n                      <div key={genre.id}>\r\n                        <label>\r\n                          <input\r\n                            name=\"selectedGenre\"\r\n                            type=\"radio\"\r\n                            value={genre.id}\r\n                            checked={values.selectedGenre.includes(genre.id)}\r\n                            onChange={handleChange}\r\n                          />{\" \"}\r\n                          {genre.name}\r\n                        </label>\r\n                      </div>\r\n                    ))\r\n                      : null}\r\n                  </div>\r\n\r\n                  <div className=\"input-row\">\r\n                    <button type=\"submit\" disabled={isSubmitting}  >\r\n                      Submit\r\n                  </button>\r\n                  </div>\r\n\r\n\r\n                  {isSubmitted ? <GetActorData values={values} isSubmitted={isSubmitted} /> : ''}\r\n\r\n                </form>\r\n              </div>\r\n            )}\r\n\r\n\r\n        </Formik>\r\n        : ''}\r\n\r\n      <DetailedSearchResults url={fullUrl} />\r\n\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default DetailedSearchForm","import React from 'react'\r\nimport JustReleasedContent from '../home/JustReleasedContent'\r\n\r\nconst PopularAllTimes = () => {\r\n\r\n  const url = 'https://api.themoviedb.org/3/discover/movie?api_key=f1782698a1c04f301973e311a7876bdb&sort_by=vote_average.desc&vote_count.gte=50&page='\r\n  return (\r\n    <div className=\"new-movies_container \">\r\n      <div className=\"new-movies-content\">\r\n        <JustReleasedContent\r\n          url={url}\r\n          text={'The most popular movies of all times:'}\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default PopularAllTimes","import React from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport JustReleasedContent from '../home/JustReleasedContent'\r\nimport Button from '../../elements/Button'\r\n\r\nconst PopularByGenres = () => {\r\n  const { genreId, genreName } = useParams()\r\n\r\n  // const showAll = (event) => {\r\n  //   event.target.previousSibling.classList.remove('new-movies_home')\r\n  //   event.target.style.display = 'none'\r\n  // };\r\n\r\n  const url = `https://api.themoviedb.org/3/discover/movie?with_genres=${genreId}&api_key=f1782698a1c04f301973e311a7876bdb&sort_by=vote_average.desc&vote_count.gte=10&page=`\r\n  return (\r\n    <div className=\"new-movies_container \">\r\n      <div className=\"new-movies-content \">\r\n        <JustReleasedContent\r\n          url={url}\r\n          text={`The most popular ${genreName} movies:`}\r\n        />\r\n      </div>\r\n\r\n      {/* <Button\r\n        onClick={event => showAll(event)}\r\n        text={'show all'}\r\n        className={'btn show_all'}\r\n      /> */}\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default PopularByGenres","import React from 'react'\r\nimport './actor.css'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport SingleResult from '../searchResults/SingleResult'\r\n\r\nconst Actor = (props) => {\r\n  const actorData = props.actorData\r\n\r\n\r\n  const getID = () => {\r\n    if (actorData.response !== null) {\r\n      return actorData.response.results[0].id\r\n    }\r\n  }\r\n\r\n  const getKnownFor = () => {\r\n    if (actorData.response !== null) {\r\n      return actorData.response.results[0].known_for\r\n    }\r\n  }\r\n  const knownForArr = getKnownFor()\r\n\r\n\r\n  const fullUrl = `https://api.themoviedb.org/3/person/${getID()}?api_key=f1782698a1c04f301973e311a7876bdb&language=en-US`\r\n\r\n  const fullActorData = useFetch(fullUrl, 'byactorid')\r\n\r\n\r\n  const { id, name, biography, profile_path, birthday, deathday, place_of_birth, homepage, media_type } = fullActorData.response !== null ? fullActorData.response : ''\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {fullActorData.response !== null && fullActorData.response !== undefined ?\r\n\r\n        <div key={id} className=\"actor_wrapper\" >\r\n          <h2>{name}</h2>\r\n          <div className=\"actor_container\">\r\n            <div>\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/original/${profile_path}`}\r\n                alt=\"actor\"\r\n                className=\"actor_img\"\r\n              />\r\n              <p>Birth date: {birthday} {deathday !== null ? `Death date: ${deathday}` : ''}</p>\r\n              <p>Born in {place_of_birth ? place_of_birth : ''}</p>\r\n            </div>\r\n\r\n            <p>{biography}</p>\r\n          </div>\r\n\r\n\r\n          <h2>{name} is known for:</h2>\r\n          <div className=\"known_for\">\r\n            {\r\n              knownForArr !== undefined && knownForArr.length > 0 ?\r\n                knownForArr.map(item => item.media_type === 'movie' ? (<div className=\"results-list\" key={item.id}>\r\n                  <SingleResult movie={item} key={item.id} />\r\n                </div>) : '')\r\n                : ''\r\n            }\r\n          </div>\r\n\r\n\r\n\r\n\r\n          {homepage ? <a href={homepage}>Visit actor's homepage</a> : ''}\r\n\r\n        </div>\r\n\r\n\r\n        : ''\r\n\r\n      }\r\n    </React.Fragment>\r\n\r\n  )\r\n}\r\n\r\nexport default Actor","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport Actor from './Actor'\r\n\r\nconst GetActor = () => {\r\n  const { actorName } = useParams()\r\n  const url = `https://api.themoviedb.org/3/search/person?query=${actorName}&api_key=f1782698a1c04f301973e311a7876bdb&language=en-US`\r\n\r\n  const actorData = useFetch(url, actorName)\r\n\r\n  return (\r\n    <Actor actorData={actorData} />\r\n  )\r\n}\r\n\r\nexport default GetActor\r\n\r\n","import React from 'react';\nimport { Switch, Route } from \"react-router-dom\"\nimport './App.css'\nimport Header from './components/Header/Header'\nimport Footer from './components/Footer/Footer'\nimport SearchLine from './components/search/SearchLine'\nimport Home from '../src/pages/home/home'\nimport MovieSearch from '../src/components/search/MovieSearch'\nimport GetMovieDetails from './pages/details/GetMovieDetails'\nimport DetailedSearchForm from './pages/detailedSearch/DetailedSearchForm'\nimport PopularAllTimes from './pages/popular/PopularAllTimes'\nimport PopularByGenres from './pages/popular/PopularByGenres'\nimport GetActor from './pages/actor/GetActor'\nimport ActorSearch from './pages/actor/ActorSearch'\n\n//**error handling from fetch  --  is useFetch neina destructing daugiau nei viena return\n\n//**minimize movie title in SingleResult to 2 rows? */\n\n//paspaudus loadMore, kai loadina paskutini psl kartoja pries tai buvusius rezultatus, o ne loadina tik likusius\n\n// popularByGenres kai paspaudi load more, persikrauna visas komponentas(psl??), o reikia kad tik prisidetu papildomi rezultatai, kaip in homepage\n\n//Actor.js known for skiltyje kolkas rodomi tik filmai, nes tv series dar neitraukta (tikriausiai kitokie details nei movie)\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <SearchLine />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n\n        <Route exact path=\"/popular_all_times\">\n          <PopularAllTimes />\n        </Route>\n\n\n        <Route exact path=\"/detailed_search\">\n          <DetailedSearchForm />\n        </Route>\n\n        <Route exact path=\"/:movieId\">\n          <GetMovieDetails />\n        </Route>\n\n        {/* <Route exact path=\"/actors\">\n          <ActorSearch />\n        </Route> */}\n\n        <Route exact path=\"/actor/:actorName\">\n          <GetActor />\n        </Route>\n\n\n\n\n\n\n\n\n        <Route exact path=\"/search_results/:query\">\n          <MovieSearch />\n        </Route>\n\n\n\n        <Route exact path=\"/popular_by_genre/:genreId/:genreName\" >\n          <PopularByGenres />\n        </Route>\n\n\n\n\n\n\n\n\n      </Switch>\n      <Footer />\n    </React.Fragment>\n  )\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\n\n\nReactDOM.render(\n  <Router basename={`${process.env.PUBLIC_URL}/`} >\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}